trigger:
- master

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '65c3da8b-ea03-4747-8835-8d486862b420'
  aksClusterName: 'eShopOnContainers'
  resourceGroupName: 'tmp-2020'
  containerRegistry: 'tmp2020.azurecr.io'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Azure subscription 1(1)(bbeb73e1-c85a-4b87-934f-8bed6c3801c1)'
        azureContainerRegistry: '{"loginServer":"tmp2020.azurecr.io", "id" : "/subscriptions/bbeb73e1-c85a-4b87-934f-8bed6c3801c1/resourceGroups/tmp-2020/providers/Microsoft.ContainerRegistry/registries/tmp2020"}'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Build services'
        includeLatestTag: true
    - task: DockerCompose@0
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscription: 'Azure subscription 1(1)(bbeb73e1-c85a-4b87-934f-8bed6c3801c1)'
        azureContainerRegistry: '{"loginServer":"tmp2020.azurecr.io", "id" : "/subscriptions/bbeb73e1-c85a-4b87-934f-8bed6c3801c1/resourceGroups/tmp-2020/providers/Microsoft.ContainerRegistry/registries/tmp2020"}'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Push services'

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'McReadereShopOnContainers.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            path: '~/eShopOnContainers'
          - task: CmdLine@2
            inputs:
              script: "~/eShopOnContainers/deploy/k8s/helm/deploy-all-mac.ps1 -externalDns aks -aksName $(aksClusterName) -aksRg $(resourceGroupName) -imageTag linux-dev -useMesh $false"